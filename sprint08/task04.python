#Create class Triangle with method get_area() that calculate area of triangle. As input you will have list of 3 sides size
#Examples:
#triangle = Triangle([3, 3, 3])
#Use classes TriangleNotValidArgumentException and TriangleNotExistException
#Create class TriangleTest with unittest and subTest() context manager for class Triangle. 
import unittest

class TriangleNotValidArgumentException(Exception):
    def __str__(self):
        return "Not valid arguments"
        
class TriangleNotExistException(Exception):
    def __str__(self):
        return "Can`t create triangle with this arguments"


class Triangle:
    def __init__(self, sides):
        self.sides = sides
        if not isinstance(self.sides, tuple):
            raise TriangleNotValidArgumentException
        elif len(self.sides)!=3:
            raise TriangleNotValidArgumentException
        for el in self.sides:
            if isinstance(el, str):
                raise TriangleNotValidArgumentException
        if self.sides[1] <= 0 or self.sides[2] <= 0 or self.sides[0] <= 0:
            raise TriangleNotExistException
        elif self.sides[0]+self.sides[1]<=self.sides[2] or self.sides[1]+self.sides[2]<=self.sides[0] or self.sides[0]+self.sides[2]<=self.sides[1]:
            raise TriangleNotExistException
 

    def get_area(self):
        half_perimeter = (self.sides[0]+self.sides[1]+self.sides[2])/2
        return (half_perimeter*(half_perimeter-self.sides[0])*(half_perimeter-self.sides[1])*(half_perimeter-self.sides[2]))**0.5

class TriangleTest(unittest.TestCase):
    not_valid_arguments = [
        ('3', 4, 5),
        ('a', 2, 3),
        (7, "str", 7),
        ('1', '1', '1'),
        'string',
        (7, 2),
        (7, 7, 7, 7),
        'str',
        10,
        ('a', 'str', 7)]
    valid_test_data =  [
    ((3, 4, 5), 6.0),
    ((10, 10, 10), 43.30),
    ((6, 7, 8), 20.33),
    ((7, 7, 7), 21.21),
    ((50, 50, 75), 1240.19),
    ((37, 43, 22), 406.99),
    ((26, 25, 3), 36.0),
    ((30, 29, 5), 72.0),
    ((87, 55, 34), 396.0),
    ((120, 109, 13), 396.0),
    ((123, 122, 5), 300.0)]
    
    not_valid_triangle = [
        (1, 2, 3),
        (1, 1, 2),
        (7, 7, 15),
        (100, 7, 90),
        (17, 18, 35),
        (127, 17, 33),
        (145, 166, 700),
        (1000, 2000, 1),
        (717, 17, 7),
        (0, 7, 7),
        (-7, 7, 7)    ]

    def test_valid_data(self):
        for t in TriangleTest.valid_test_data:
            with self.subTest():
                self.assertAlmostEqual(Triangle(t[0]).get_area(),t[1],1)

    def test_not_valid_triangle(self):
        for item in TriangleTest.not_valid_triangle:
            with self.subTest():
                self.assertRaises(TriangleNotExistException)

    def test_not_valid_arguments(self):
        for item in TriangleTest.not_valid_arguments:
            with self.subTest():
                self.assertRaises(TriangleNotValidArgumentException)
                


