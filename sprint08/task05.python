#Create class Worker with fields name and salary. If salary negative raise ValueError

#Create a method get_tax_value() that calculate tax from salary . Tax must be calculate like "progressive tax" with next step:

#less then 1000 - 0%
#1001 - 3000 - 10%
#3001 - 5000 - 15%
#5001 - 10000 - 21%
#10001 - 20000 - 30%
#20001 - 50000 - 40%
#more than 50000 - 47%
#Please create WorkerTest class with unitest to the class Worker. Try to use setUp and tearDown methods. Don`t use assertRaises in tests.
import unittest

class Worker:
    def __init__(self, name, salary=0.0):
        self.name = name
        self.salary = salary
        if self.salary < 0:
            raise ValueError


    def get_tax_value(self):
        if self.salary <= 1000:
            return 0.0
        elif self.salary > 1000 and self.salary <=3000:
            return 0.1*(self.salary-1000)
        elif self.salary > 3000 and self.salary <= 5000:
            return 200+0.15*(self.salary-3000)
        elif self.salary >5000 and self.salary <=10000:
            return 500+0.21*(self.salary-5000)
        elif self.salary>10000 and self.salary<=20000:
            return 1550 + 0.3*(self.salary-10000)
        elif self.salary>20000 and self.salary<=50000:
            return 4550 + 0.4*(self.salary-20000)
        else:
            return 16550 + 0.47*(self.salary-50000)

class WorkerTest(unittest.TestCase):
    def setUp(self):
        self.worker = Worker("NNN", 1000)
        self.worker2 = Worker("NNN2", 100000)

    def test_zero(self):
        self.assertEqual(self.worker.get_tax_value(),0)


    def test_million(self):
        self.assertEqual(self.worker2.get_tax_value(), 40050)
    
    
    @unittest.expectedFailure
    def test_error(self):
        self.worker3 = Worker("NNN3", -1000)

    def tearDown(self):
        self.worker = None
